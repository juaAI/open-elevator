{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Elevator API Open Elevator API is an easy to use elevation service with up to 3m resolution. Use our free public API or run your own . Try it out API example Single location $ curl http://localhost:8080/v1/elevation/json?lat = 50 .078217 & lon = 8 .239761 { \"elevation\" : 118.73242074762783 , \"location\" : { \"lat\" : 50.078217 , \"lon\" : 8.239761 } } Multiple locations $ curl -X 'POST' \\ 'https://opendata.predly.com/v1/elevation/json' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"locations\": [ [50,8],[50,9],[51,8] ], \"interpolation\": \"linear\" }' { \"results\" : [ { \"elevation\" : -32 , \"location\" : { \"lat\" : 50 , \"lon\" : 8 } }, { \"elevation\" : 397 , \"location\" : { \"lat\" : 50 , \"lon\" : 9 } }, { \"elevation\" : -3361 , \"location\" : { \"lat\" : 51 , \"lon\" : 8 } } ] } Package example from PIL import Image from openelevator import OpenElevator elevator = OpenElevator () # visualize a specific location img = elevator . plot_elevation ( lat = 50.078217 , lon = 8.239761 ) with Image . open ( img ) as im : im . show ()","title":"Introduction"},{"location":"#api-example","text":"","title":"API example"},{"location":"#single-location","text":"$ curl http://localhost:8080/v1/elevation/json?lat = 50 .078217 & lon = 8 .239761 { \"elevation\" : 118.73242074762783 , \"location\" : { \"lat\" : 50.078217 , \"lon\" : 8.239761 } }","title":"Single location"},{"location":"#multiple-locations","text":"$ curl -X 'POST' \\ 'https://opendata.predly.com/v1/elevation/json' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"locations\": [ [50,8],[50,9],[51,8] ], \"interpolation\": \"linear\" }' { \"results\" : [ { \"elevation\" : -32 , \"location\" : { \"lat\" : 50 , \"lon\" : 8 } }, { \"elevation\" : 397 , \"location\" : { \"lat\" : 50 , \"lon\" : 9 } }, { \"elevation\" : -3361 , \"location\" : { \"lat\" : 51 , \"lon\" : 8 } } ] }","title":"Multiple locations"},{"location":"#package-example","text":"from PIL import Image from openelevator import OpenElevator elevator = OpenElevator () # visualize a specific location img = elevator . plot_elevation ( lat = 50.078217 , lon = 8.239761 ) with Image . open ( img ) as im : im . show ()","title":"Package example"},{"location":"api/","text":"API The API provides global elevation data access via HTTP. It's possible to either query a single location, or up to 100 locations at once. Optionally, it's possible to select the interpolation method used. The overall resolution depends on the location queried (more Information) . The API has 1 endpoint: https://opendata.predly.com/v1/elevation/json Single location Request For a single location, use a GET request: $ curl https://opendata.predly.com/v1/elevation/json?lat = 50 .078217 & lon = 8 .239761 Parameters required lat: float lon: float optional interpolation: str in [\"none\", \"linear\", \"cubic\", \"nearest] Response { \"elevation\" : 118.73242074762783 , \"location\" : { \"lat\" : 50.078217 , \"lon\" : 8.239761 } } Multiple locations To query up to 100 locations at once, use a POST request. Request $ curl -X 'POST' \\ 'https://opendata.predly.com/v1/elevation/json' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"locations\": [ [50,8],[50,9],[51,8] ], \"interpolation\": \"linear\" }' Parameters required list of: [ lon: float, lat: float ] optional interpolation: str in [\"none\", \"linear\", \"cubic\", \"nearest] Response { \"results\" : [ { \"elevation\" : -32 , \"location\" : { \"lat\" : 50 , \"lon\" : 8 } }, { \"elevation\" : 397 , \"location\" : { \"lat\" : 50 , \"lon\" : 9 } }, { \"elevation\" : -3361 , \"location\" : { \"lat\" : 51 , \"lon\" : 8 } } ] }","title":"API usage"},{"location":"api/#api","text":"The API provides global elevation data access via HTTP. It's possible to either query a single location, or up to 100 locations at once. Optionally, it's possible to select the interpolation method used. The overall resolution depends on the location queried (more Information) . The API has 1 endpoint: https://opendata.predly.com/v1/elevation/json","title":"API"},{"location":"api/#single-location","text":"","title":"Single location"},{"location":"api/#request","text":"For a single location, use a GET request: $ curl https://opendata.predly.com/v1/elevation/json?lat = 50 .078217 & lon = 8 .239761","title":"Request"},{"location":"api/#parameters","text":"required lat: float lon: float optional interpolation: str in [\"none\", \"linear\", \"cubic\", \"nearest]","title":"Parameters"},{"location":"api/#response","text":"{ \"elevation\" : 118.73242074762783 , \"location\" : { \"lat\" : 50.078217 , \"lon\" : 8.239761 } }","title":"Response"},{"location":"api/#multiple-locations","text":"To query up to 100 locations at once, use a POST request.","title":"Multiple locations"},{"location":"api/#request_1","text":"$ curl -X 'POST' \\ 'https://opendata.predly.com/v1/elevation/json' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"locations\": [ [50,8],[50,9],[51,8] ], \"interpolation\": \"linear\" }'","title":"Request"},{"location":"api/#parameters_1","text":"required list of: [ lon: float, lat: float ] optional interpolation: str in [\"none\", \"linear\", \"cubic\", \"nearest]","title":"Parameters"},{"location":"api/#response_1","text":"{ \"results\" : [ { \"elevation\" : -32 , \"location\" : { \"lat\" : 50 , \"lon\" : 8 } }, { \"elevation\" : 397 , \"location\" : { \"lat\" : 50 , \"lon\" : 9 } }, { \"elevation\" : -3361 , \"location\" : { \"lat\" : 51 , \"lon\" : 8 } } ] }","title":"Response"},{"location":"attribution/","text":"Attribution ArcticDEM terrain data DEM(s) were created from DigitalGlobe, Inc., imagery and funded under National Science Foundation awards 1043681, 1559691, and 1542736; Australia terrain data \u00a9 Commonwealth of Australia (Geoscience Australia) 2017; Austria terrain data \u00a9 offene Daten \u00d6sterreichs \u2013 Digitales Gel\u00e4ndemodell (DGM) \u00d6sterreich; Canada terrain data contains information licensed under the Open Government Licence \u2013 Canada; Europe terrain data produced using Copernicus data and information funded by the European Union - EU-DEM layers; Global ETOPO1 terrain data U.S. National Oceanic and Atmospheric Administration Mexico terrain data source: INEGI, Continental relief, 2016; New Zealand terrain data Copyright 2011 Crown copyright (c) Land Information New Zealand and the New Zealand Government (All rights reserved); Norway terrain data \u00a9 Kartverket; United Kingdom terrain data \u00a9 Environment Agency copyright and/or database right All rights reserved; United States 3DEP (formerly NED) and global GMTED2010 and SRTM terrain data courtesy of the U.S. Geological Survey.","title":"Attribution"},{"location":"attribution/#attribution","text":"ArcticDEM terrain data DEM(s) were created from DigitalGlobe, Inc., imagery and funded under National Science Foundation awards 1043681, 1559691, and 1542736; Australia terrain data \u00a9 Commonwealth of Australia (Geoscience Australia) 2017; Austria terrain data \u00a9 offene Daten \u00d6sterreichs \u2013 Digitales Gel\u00e4ndemodell (DGM) \u00d6sterreich; Canada terrain data contains information licensed under the Open Government Licence \u2013 Canada; Europe terrain data produced using Copernicus data and information funded by the European Union - EU-DEM layers; Global ETOPO1 terrain data U.S. National Oceanic and Atmospheric Administration Mexico terrain data source: INEGI, Continental relief, 2016; New Zealand terrain data Copyright 2011 Crown copyright (c) Land Information New Zealand and the New Zealand Government (All rights reserved); Norway terrain data \u00a9 Kartverket; United Kingdom terrain data \u00a9 Environment Agency copyright and/or database right All rights reserved; United States 3DEP (formerly NED) and global GMTED2010 and SRTM terrain data courtesy of the U.S. Geological Survey.","title":"Attribution"},{"location":"changelog/","text":"Changelog V0.1 First working version","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v01","text":"First working version","title":"V0.1"},{"location":"dataset/","text":"Dataset The data source is Mapzen Terrain Tiles, provided by Amazon S3 . As mentioned in the repo: Attribution is required for some data providers. See the Attribution document for more information. List of sources The underlying data sources are a mix of: 3DEP (formerly NED and NED Topobathy) in the United States, 10 meters outside of Alaska, 3 meter in select land and territorial water areas ArcticDEM strips of 5 meter mosaics across all of the land north of 60\u00b0 latitude, including Alaska, Canada, Greenland, Iceland, Norway, Russia, and Sweden CDEM (Canadian Digital Elevation Model) in Canada, with variable spatial resolution (from 20-400 meters) depending on the latitude. data.gov.uk , 2 meters over most of the United Kingdom data.gv.at , 10 meters over Austria ETOPO1 for ocean bathymetry, 1 arc-minute resolution globally EUDEM in most of Europe at 30 meter resolution, including Albania, Austria, Belgium, Bosnia and Herzegovina, Bulgaria, Croatia, Cyprus, Czechia, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Kosovo, Latvia, Liechtenstein, Lithuania, Luxembourg, Macedonia, Malta, Montenegro, Netherlands, Norway, Poland, Portugal, Romania, Serbia, Slovakia, Slovenia, Spain, Sweden, Switzerland, and United Kingdom Geoscience Australia's DEM of Australia , 5 meters around coastal regions in South Australia, Victoria, and Northern Territory GMTED globally, coarser resolutions at 7.5\", 15\", and 30\" in land areas INEGI 's continental relief in Mexico Kartverket 's Digital Terrain Model, 10 meters over Norway LINZ , 8 meters over New Zealand SRTM globally except high latitudes, 30 meters (90 meters nominal quality) in land areas More Information","title":"Dataset"},{"location":"dataset/#dataset","text":"The data source is Mapzen Terrain Tiles, provided by Amazon S3 . As mentioned in the repo: Attribution is required for some data providers. See the Attribution document for more information.","title":"Dataset"},{"location":"dataset/#list-of-sources","text":"The underlying data sources are a mix of: 3DEP (formerly NED and NED Topobathy) in the United States, 10 meters outside of Alaska, 3 meter in select land and territorial water areas ArcticDEM strips of 5 meter mosaics across all of the land north of 60\u00b0 latitude, including Alaska, Canada, Greenland, Iceland, Norway, Russia, and Sweden CDEM (Canadian Digital Elevation Model) in Canada, with variable spatial resolution (from 20-400 meters) depending on the latitude. data.gov.uk , 2 meters over most of the United Kingdom data.gv.at , 10 meters over Austria ETOPO1 for ocean bathymetry, 1 arc-minute resolution globally EUDEM in most of Europe at 30 meter resolution, including Albania, Austria, Belgium, Bosnia and Herzegovina, Bulgaria, Croatia, Cyprus, Czechia, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Kosovo, Latvia, Liechtenstein, Lithuania, Luxembourg, Macedonia, Malta, Montenegro, Netherlands, Norway, Poland, Portugal, Romania, Serbia, Slovakia, Slovenia, Spain, Sweden, Switzerland, and United Kingdom Geoscience Australia's DEM of Australia , 5 meters around coastal regions in South Australia, Victoria, and Northern Territory GMTED globally, coarser resolutions at 7.5\", 15\", and 30\" in land areas INEGI 's continental relief in Mexico Kartverket 's Digital Terrain Model, 10 meters over Norway LINZ , 8 meters over New Zealand SRTM globally except high latitudes, 30 meters (90 meters nominal quality) in land areas More Information","title":"List of sources"},{"location":"installation/","text":"Installation You can set up the API on your own for free. To do so, you need at least 1.6 TB of disk space. Requirements Linux Anaconda Redis >1.6 TB disk space Setup $ conda env create --file /env/environment.yml $ conda activate open-elevator $ python openelevator.py This will start downloading and preprocessing the neccessary DEM files from AWS . This step may take several hours up to a day depending on the machine used. Configuration Update the configuration file (/openelevator/api/config.yml) to your specific needs. You can activate SSL encryption by passing a SSL cert and key file. The rate-limit specifies the amount of allowed API calls in a specific amount of time. The rate-reset specifies this amount of time in seconds . The viz-active enables the plotting route , which is deactivated at the public API. ssl: ssl: True cert: /path/to/cert.pem cert-key: /path/to/privkey.pem server: host: 0.0.0.0 port: 8080 rate-limit: 100 rate-reset: 60 viz-active: False Start the API The API is serverd via Uvicorn . If you want to start the API in background, you can use nohup python server.py . $ python server.py INFO: Started server process [ 696905 ] INFO: Waiting for application startup. INFO: Application startup complete. INFO: Uvicorn running on https://0.0.0.0:8080 ( Press CTRL+C to quit )","title":"Local setup"},{"location":"installation/#installation","text":"You can set up the API on your own for free. To do so, you need at least 1.6 TB of disk space.","title":"Installation"},{"location":"installation/#requirements","text":"Linux Anaconda Redis >1.6 TB disk space","title":"Requirements"},{"location":"installation/#setup","text":"$ conda env create --file /env/environment.yml $ conda activate open-elevator $ python openelevator.py This will start downloading and preprocessing the neccessary DEM files from AWS . This step may take several hours up to a day depending on the machine used.","title":"Setup"},{"location":"installation/#configuration","text":"Update the configuration file (/openelevator/api/config.yml) to your specific needs. You can activate SSL encryption by passing a SSL cert and key file. The rate-limit specifies the amount of allowed API calls in a specific amount of time. The rate-reset specifies this amount of time in seconds . The viz-active enables the plotting route , which is deactivated at the public API. ssl: ssl: True cert: /path/to/cert.pem cert-key: /path/to/privkey.pem server: host: 0.0.0.0 port: 8080 rate-limit: 100 rate-reset: 60 viz-active: False","title":"Configuration"},{"location":"installation/#start-the-api","text":"The API is serverd via Uvicorn . If you want to start the API in background, you can use nohup python server.py . $ python server.py INFO: Started server process [ 696905 ] INFO: Waiting for application startup. INFO: Application startup complete. INFO: Uvicorn running on https://0.0.0.0:8080 ( Press CTRL+C to quit )","title":"Start the API"}]}